<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>database on 삽질할수록 기억에 더 남는다</title><link>https://wondsn.github.io/tags/database/</link><description>Recent content in database on 삽질할수록 기억에 더 남는다</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 18 Jun 2021 20:05:24 +0900</lastBuildDate><atom:link href="https://wondsn.github.io/tags/database/index.xml" rel="self" type="application/rss+xml"/><item><title>JPA3 - 영속성 컨텍스트</title><link>https://wondsn.github.io/2021/06/jpa3-%EC%98%81%EC%86%8D%EC%84%B1-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8/</link><pubDate>Fri, 18 Jun 2021 20:05:24 +0900</pubDate><guid>https://wondsn.github.io/2021/06/jpa3-%EC%98%81%EC%86%8D%EC%84%B1-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8/</guid><description>영속성 컨텍스트(Persistence Context)는 엔티티를 영구 저정하는 환경을 의미합니다. 좀 더 쉽게 풀어보자면 DB를 통해 얻어온 데이터들을 저장하는 내부 저장소가 있음을 의미합니다. 내부 저장소가 있음으로서 얻는 이점이 있기 때문입니다.
엔티티: 영속성 컨텍스트에 저장되는 도메인(혹은 데이터) 객체 JPA에서는 영속성 컨텍스트에 접근하기 위해 엔티티 매니저(EntityManager)를 사용하고 있습니다. 엔티티 매니저를 통해 엔티티들의 라이프 사이클을 관리할 수 있게 됩니다. 엔티티의 라이프 사이클을 비영속, 영속, 준영속, 삭제 상태가 있습니다.
비영속(new/transient): 영속성 컨텍스트와 전혀 관계없는 새로운 상태.</description></item><item><title>JPA2 - JPA 소개</title><link>https://wondsn.github.io/2021/02/jpa2-jpa-%EC%86%8C%EA%B0%9C/</link><pubDate>Mon, 15 Feb 2021 23:42:58 +0900</pubDate><guid>https://wondsn.github.io/2021/02/jpa2-jpa-%EC%86%8C%EA%B0%9C/</guid><description>이전 포스트에서 말한 문제들을 다시 복습하자면
웹 어플리케이션과 RDB간의 의존성이 생김 웹 어플리케이션과 RDB간의 패러다임 불일치 문제 위 문제를 해결하기 위해 고안한 것이 JPA(Java Persistence API)이다. 간단하게 말하자면 JPA는 데이터를 자바의 컬렉션처럼 저장하도록 도와주는 API로 생각하면 편할 것이다.
정확히 말하자면 JPA는 Java 진영의 ORM 기술 표준이다. ORM(Object-relational Mapping)는 객체와 RDB 사이에서 맵핑하는 역할을 하고 있다. 대중적인 언어에선 대부분 표준 ORM이 존재하고 있다.
JPA 내부에 JDBC API를 이용해 쿼리를 보내주고 있다.</description></item><item><title>JPA1 - JPA 탄생배경</title><link>https://wondsn.github.io/2021/02/jpa1-jpa-%ED%83%84%EC%83%9D%EB%B0%B0%EA%B2%BD/</link><pubDate>Sun, 07 Feb 2021 15:56:55 +0900</pubDate><guid>https://wondsn.github.io/2021/02/jpa1-jpa-%ED%83%84%EC%83%9D%EB%B0%B0%EA%B2%BD/</guid><description>이번 포스트부터 Spring에서 JPA에 대해서 다뤄볼려고 한다. Spring을 처음 접하면서 Database도 처음 써봤다.(그전에는 OS쪽으로만 개발했었고 Java로 웹 어플리케이션을 개발하는 것은 처음이다.)
그래서 Spring에 대한 지식도 익힐 겸 인프런에서 김영한님의 강의내용을 정리하는 방식으로 포스트를 써볼려고 한다. (Spring을 처음 접한다면 이분의 강의로 꼭 입문 바란다. 뉴비입장에서 꼼꼼히, 그리고 실무 내용 위주로 강의한다.)
JPA 배경 현재 웹 어플리케이션을 개발할 때 RDB(Relational DataBase)없이 개발하기 힘든 지경이다.(대부분 돈과 관련된 서비스를 만들 시, RDB는 필수 불가결이다.)</description></item></channel></rss>